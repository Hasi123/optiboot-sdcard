
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c24  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e4a  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002d  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	98 2f       	mov	r25, r24
    7e0e:	9d 70       	andi	r25, 0x0D	; 13
    7e10:	09 f0       	breq	.+2      	; 0x7e14 <main+0x14>
    7e12:	d5 d0       	rcall	.+426    	; 0x7fbe <appStart>
    7e14:	85 e0       	ldi	r24, 0x05	; 5
    7e16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7e1a:	82 e0       	ldi	r24, 0x02	; 2
    7e1c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e20:	88 e1       	ldi	r24, 0x18	; 24
    7e22:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7e26:	86 e0       	ldi	r24, 0x06	; 6
    7e28:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7e2c:	80 e1       	ldi	r24, 0x10	; 16
    7e2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7e32:	8e e0       	ldi	r24, 0x0E	; 14
    7e34:	af d0       	rcall	.+350    	; 0x7f94 <watchdogConfig>
    7e36:	25 9a       	sbi	0x04, 5	; 4
    7e38:	86 e0       	ldi	r24, 0x06	; 6
    7e3a:	28 e1       	ldi	r18, 0x18	; 24
    7e3c:	3e ef       	ldi	r19, 0xFE	; 254
    7e3e:	91 e0       	ldi	r25, 0x01	; 1
    7e40:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7e44:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    7e48:	96 bb       	out	0x16, r25	; 22
    7e4a:	b0 9b       	sbis	0x16, 0	; 22
    7e4c:	fe cf       	rjmp	.-4      	; 0x7e4a <main+0x4a>
    7e4e:	1d 9a       	sbi	0x03, 5	; 3
    7e50:	a8 95       	wdr
    7e52:	81 50       	subi	r24, 0x01	; 1
    7e54:	a9 f7       	brne	.-22     	; 0x7e40 <main+0x40>
    7e56:	81 2c       	mov	r8, r1
    7e58:	91 2c       	mov	r9, r1
    7e5a:	93 e0       	ldi	r25, 0x03	; 3
    7e5c:	f9 2e       	mov	r15, r25
    7e5e:	ee 24       	eor	r14, r14
    7e60:	e3 94       	inc	r14
    7e62:	25 e0       	ldi	r18, 0x05	; 5
    7e64:	d2 2e       	mov	r13, r18
    7e66:	31 e1       	ldi	r19, 0x11	; 17
    7e68:	c3 2e       	mov	r12, r19
    7e6a:	88 d0       	rcall	.+272    	; 0x7f7c <getch>
    7e6c:	81 34       	cpi	r24, 0x41	; 65
    7e6e:	79 f4       	brne	.+30     	; 0x7e8e <main+0x8e>
    7e70:	85 d0       	rcall	.+266    	; 0x7f7c <getch>
    7e72:	89 83       	std	Y+1, r24	; 0x01
    7e74:	95 d0       	rcall	.+298    	; 0x7fa0 <verifySpace>
    7e76:	89 81       	ldd	r24, Y+1	; 0x01
    7e78:	82 38       	cpi	r24, 0x82	; 130
    7e7a:	11 f4       	brne	.+4      	; 0x7e80 <main+0x80>
    7e7c:	82 e0       	ldi	r24, 0x02	; 2
    7e7e:	05 c0       	rjmp	.+10     	; 0x7e8a <main+0x8a>
    7e80:	81 38       	cpi	r24, 0x81	; 129
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
    7e84:	86 e0       	ldi	r24, 0x06	; 6
    7e86:	01 c0       	rjmp	.+2      	; 0x7e8a <main+0x8a>
    7e88:	83 e0       	ldi	r24, 0x03	; 3
    7e8a:	71 d0       	rcall	.+226    	; 0x7f6e <putch>
    7e8c:	6d c0       	rjmp	.+218    	; 0x7f68 <main+0x168>
    7e8e:	82 34       	cpi	r24, 0x42	; 66
    7e90:	11 f4       	brne	.+4      	; 0x7e96 <main+0x96>
    7e92:	84 e1       	ldi	r24, 0x14	; 20
    7e94:	03 c0       	rjmp	.+6      	; 0x7e9c <main+0x9c>
    7e96:	85 34       	cpi	r24, 0x45	; 69
    7e98:	19 f4       	brne	.+6      	; 0x7ea0 <main+0xa0>
    7e9a:	85 e0       	ldi	r24, 0x05	; 5
    7e9c:	89 d0       	rcall	.+274    	; 0x7fb0 <getNch>
    7e9e:	64 c0       	rjmp	.+200    	; 0x7f68 <main+0x168>
    7ea0:	85 35       	cpi	r24, 0x55	; 85
    7ea2:	49 f4       	brne	.+18     	; 0x7eb6 <main+0xb6>
    7ea4:	6b d0       	rcall	.+214    	; 0x7f7c <getch>
    7ea6:	18 2f       	mov	r17, r24
    7ea8:	69 d0       	rcall	.+210    	; 0x7f7c <getch>
    7eaa:	81 2e       	mov	r8, r17
    7eac:	91 2c       	mov	r9, r1
    7eae:	98 2a       	or	r9, r24
    7eb0:	88 0c       	add	r8, r8
    7eb2:	99 1c       	adc	r9, r9
    7eb4:	58 c0       	rjmp	.+176    	; 0x7f66 <main+0x166>
    7eb6:	86 35       	cpi	r24, 0x56	; 86
    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <main+0xc2>
    7eba:	84 e0       	ldi	r24, 0x04	; 4
    7ebc:	79 d0       	rcall	.+242    	; 0x7fb0 <getNch>
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	e4 cf       	rjmp	.-56     	; 0x7e8a <main+0x8a>
    7ec2:	84 36       	cpi	r24, 0x64	; 100
    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <main+0xc8>
    7ec6:	32 c0       	rjmp	.+100    	; 0x7f2c <main+0x12c>
    7ec8:	59 d0       	rcall	.+178    	; 0x7f7c <getch>
    7eca:	58 d0       	rcall	.+176    	; 0x7f7c <getch>
    7ecc:	b8 2e       	mov	r11, r24
    7ece:	56 d0       	rcall	.+172    	; 0x7f7c <getch>
    7ed0:	a8 2e       	mov	r10, r24
    7ed2:	00 e0       	ldi	r16, 0x00	; 0
    7ed4:	11 e0       	ldi	r17, 0x01	; 1
    7ed6:	52 d0       	rcall	.+164    	; 0x7f7c <getch>
    7ed8:	f8 01       	movw	r30, r16
    7eda:	81 93       	st	Z+, r24
    7edc:	8f 01       	movw	r16, r30
    7ede:	be 12       	cpse	r11, r30
    7ee0:	fa cf       	rjmp	.-12     	; 0x7ed6 <main+0xd6>
    7ee2:	5e d0       	rcall	.+188    	; 0x7fa0 <verifySpace>
    7ee4:	f5 e4       	ldi	r31, 0x45	; 69
    7ee6:	af 12       	cpse	r10, r31
    7ee8:	01 c0       	rjmp	.+2      	; 0x7eec <main+0xec>
    7eea:	ff cf       	rjmp	.-2      	; 0x7eea <main+0xea>
    7eec:	f4 01       	movw	r30, r8
    7eee:	f7 be       	out	0x37, r15	; 55
    7ef0:	e8 95       	spm
    7ef2:	07 b6       	in	r0, 0x37	; 55
    7ef4:	00 fc       	sbrc	r0, 0
    7ef6:	fd cf       	rjmp	.-6      	; 0x7ef2 <main+0xf2>
    7ef8:	f4 01       	movw	r30, r8
    7efa:	a0 e0       	ldi	r26, 0x00	; 0
    7efc:	b1 e0       	ldi	r27, 0x01	; 1
    7efe:	8c 91       	ld	r24, X
    7f00:	11 96       	adiw	r26, 0x01	; 1
    7f02:	2c 91       	ld	r18, X
    7f04:	11 97       	sbiw	r26, 0x01	; 1
    7f06:	90 e0       	ldi	r25, 0x00	; 0
    7f08:	92 2b       	or	r25, r18
    7f0a:	0c 01       	movw	r0, r24
    7f0c:	e7 be       	out	0x37, r14	; 55
    7f0e:	e8 95       	spm
    7f10:	11 24       	eor	r1, r1
    7f12:	32 96       	adiw	r30, 0x02	; 2
    7f14:	12 96       	adiw	r26, 0x02	; 2
    7f16:	ba 12       	cpse	r11, r26
    7f18:	f2 cf       	rjmp	.-28     	; 0x7efe <main+0xfe>
    7f1a:	f4 01       	movw	r30, r8
    7f1c:	d7 be       	out	0x37, r13	; 55
    7f1e:	e8 95       	spm
    7f20:	07 b6       	in	r0, 0x37	; 55
    7f22:	00 fc       	sbrc	r0, 0
    7f24:	fd cf       	rjmp	.-6      	; 0x7f20 <main+0x120>
    7f26:	c7 be       	out	0x37, r12	; 55
    7f28:	e8 95       	spm
    7f2a:	1e c0       	rjmp	.+60     	; 0x7f68 <main+0x168>
    7f2c:	84 37       	cpi	r24, 0x74	; 116
    7f2e:	71 f4       	brne	.+28     	; 0x7f4c <main+0x14c>
    7f30:	25 d0       	rcall	.+74     	; 0x7f7c <getch>
    7f32:	24 d0       	rcall	.+72     	; 0x7f7c <getch>
    7f34:	b8 2e       	mov	r11, r24
    7f36:	22 d0       	rcall	.+68     	; 0x7f7c <getch>
    7f38:	33 d0       	rcall	.+102    	; 0x7fa0 <verifySpace>
    7f3a:	84 01       	movw	r16, r8
    7f3c:	f8 01       	movw	r30, r16
    7f3e:	85 91       	lpm	r24, Z+
    7f40:	8f 01       	movw	r16, r30
    7f42:	15 d0       	rcall	.+42     	; 0x7f6e <putch>
    7f44:	ba 94       	dec	r11
    7f46:	b1 10       	cpse	r11, r1
    7f48:	f9 cf       	rjmp	.-14     	; 0x7f3c <main+0x13c>
    7f4a:	0e c0       	rjmp	.+28     	; 0x7f68 <main+0x168>
    7f4c:	85 37       	cpi	r24, 0x75	; 117
    7f4e:	39 f4       	brne	.+14     	; 0x7f5e <main+0x15e>
    7f50:	27 d0       	rcall	.+78     	; 0x7fa0 <verifySpace>
    7f52:	8e e1       	ldi	r24, 0x1E	; 30
    7f54:	0c d0       	rcall	.+24     	; 0x7f6e <putch>
    7f56:	85 e9       	ldi	r24, 0x95	; 149
    7f58:	0a d0       	rcall	.+20     	; 0x7f6e <putch>
    7f5a:	8f e0       	ldi	r24, 0x0F	; 15
    7f5c:	96 cf       	rjmp	.-212    	; 0x7e8a <main+0x8a>
    7f5e:	81 35       	cpi	r24, 0x51	; 81
    7f60:	11 f4       	brne	.+4      	; 0x7f66 <main+0x166>
    7f62:	88 e0       	ldi	r24, 0x08	; 8
    7f64:	17 d0       	rcall	.+46     	; 0x7f94 <watchdogConfig>
    7f66:	1c d0       	rcall	.+56     	; 0x7fa0 <verifySpace>
    7f68:	80 e1       	ldi	r24, 0x10	; 16
    7f6a:	01 d0       	rcall	.+2      	; 0x7f6e <putch>
    7f6c:	7e cf       	rjmp	.-260    	; 0x7e6a <main+0x6a>

00007f6e <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f6e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f72:	95 ff       	sbrs	r25, 5
    7f74:	fc cf       	rjmp	.-8      	; 0x7f6e <putch>
  UART_UDR = ch;
    7f76:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f7a:	08 95       	ret

00007f7c <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f7c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f80:	87 ff       	sbrs	r24, 7
    7f82:	fc cf       	rjmp	.-8      	; 0x7f7c <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f84:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f88:	84 fd       	sbrc	r24, 4
    7f8a:	01 c0       	rjmp	.+2      	; 0x7f8e <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f8c:	a8 95       	wdr
  ch = UART_UDR;
    7f8e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    7f92:	08 95       	ret

00007f94 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f94:	e0 e6       	ldi	r30, 0x60	; 96
    7f96:	f0 e0       	ldi	r31, 0x00	; 0
    7f98:	98 e1       	ldi	r25, 0x18	; 24
    7f9a:	90 83       	st	Z, r25
  WDTCSR = x;
    7f9c:	80 83       	st	Z, r24
    7f9e:	08 95       	ret

00007fa0 <verifySpace>:
  if (getch() != CRC_EOP) {
    7fa0:	ed df       	rcall	.-38     	; 0x7f7c <getch>
    7fa2:	80 32       	cpi	r24, 0x20	; 32
    7fa4:	19 f0       	breq	.+6      	; 0x7fac <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fa6:	88 e0       	ldi	r24, 0x08	; 8
    7fa8:	f5 df       	rcall	.-22     	; 0x7f94 <watchdogConfig>
    7faa:	ff cf       	rjmp	.-2      	; 0x7faa <verifySpace+0xa>
  putch(STK_INSYNC);
    7fac:	84 e1       	ldi	r24, 0x14	; 20
    7fae:	df cf       	rjmp	.-66     	; 0x7f6e <putch>

00007fb0 <getNch>:
void getNch(uint8_t count) {
    7fb0:	cf 93       	push	r28
    7fb2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fb4:	e3 df       	rcall	.-58     	; 0x7f7c <getch>
    7fb6:	c1 50       	subi	r28, 0x01	; 1
    7fb8:	e9 f7       	brne	.-6      	; 0x7fb4 <getNch+0x4>
}
    7fba:	cf 91       	pop	r28
  verifySpace();
    7fbc:	f1 cf       	rjmp	.-30     	; 0x7fa0 <verifySpace>

00007fbe <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fbe:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fc0:	80 e0       	ldi	r24, 0x00	; 0
    7fc2:	e8 df       	rcall	.-48     	; 0x7f94 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fc4:	e0 e0       	ldi	r30, 0x00	; 0
    7fc6:	ff 27       	eor	r31, r31
    7fc8:	09 94       	ijmp
